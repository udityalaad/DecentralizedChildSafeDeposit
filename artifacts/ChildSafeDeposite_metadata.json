{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "child",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "parent1",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "parent2",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "observer1",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "observer2",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "childEligibilityTimestamp",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "parentEligibilityTimestamp",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "observerEligibilityTimestamp",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "emergencyWithdrawal_globalLimit",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"name": "StringsInsufficientHexLength",
				"type": "error"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "MIN_REQUIRED_DIFF_BETWEEN_CHILD_AND_PARENT_ELIGIBILITY",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MIN_REQUIRED_DIFF_BETWEEN_PARENT_AND_OBSERVER_ELIGIBILITY",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MIN_REQUIRED_TIME_LAPSE_BEFORE_EMERGENCY_WITHDRAWAL",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getChildEmergencyWithdrawalLimit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getEligibilityTimestamps",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getGlobalEmergencyWithdrawalLimit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getParentEmergencyWithdrawalLimit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getStakeholders",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "makeEmergencyWithdrawal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "updateChildEmergencyWithdrawalLimit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "updateParentEmergencyWithdrawalLimit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"custom:dev-run-script": "./scripts/deploy_with_ethers.ts",
			"details": "Store & retrieve value in a variable",
			"errors": {
				"StringsInsufficientHexLength(uint256,uint256)": [
					{
						"details": "The `value` string doesn't fit in the specified `length`."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"getChildEmergencyWithdrawalLimit()": {
					"details": "Returns the latest childEmergencyWithdrawalLimit"
				},
				"getEligibilityTimestamps()": {
					"details": "Returns the normal-withdrawal eligibilityTimestamps for all stakeholders"
				},
				"getGlobalEmergencyWithdrawalLimit()": {
					"details": "Returns the global-emergency-withdrawal-limit (the upperLimit for all other emergency-withdrawal limits)"
				},
				"getParentEmergencyWithdrawalLimit()": {
					"details": "Returns the latest parentEmergencyWithdrawalLimit"
				},
				"getStakeholders()": {
					"details": "Returns the address(es) of all stakeholders involved "
				},
				"makeEmergencyWithdrawal(uint256)": {
					"details": "Emergency-fund withdrawal (by child/parent -- upto what is allowed per custom limits)",
					"params": {
						"amount": ": MAXIMUM (in case lower balance) amount to withdraw"
					}
				},
				"updateChildEmergencyWithdrawalLimit(uint256)": {
					"details": "Observer(s) are allowed to update childEmergencyWithdrawalLimit",
					"params": {
						"amount": ": to set as the childEmergencyWithdrawalLimit"
					}
				},
				"updateParentEmergencyWithdrawalLimit(uint256)": {
					"details": "Child is allowed to update parentEmergencyWithdrawalLimit",
					"params": {
						"amount": ": to set as the parentEmergencyWithdrawalLimit"
					}
				},
				"withdraw(uint256)": {
					"details": "Fund withdrawal (by child/parent/observer -- if eligible)",
					"params": {
						"amount": ": MAXIMUM (in case lower balance) amount to withdraw"
					}
				}
			},
			"title": "Storage",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ChildSafeDeposit.sol": "ChildSafeDeposite"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0xad148d59f05165f9217d0a9e1ac8f772abb02ea6aaad8a756315c532bf79f9f4",
			"license": "MIT",
			"urls": [
				"bzz-raw://15e3599867c2182f5831e9268b274b2ef2047825837df6b4d81c9e89254b093e",
				"dweb:/ipfs/QmZbL7XAYr5RmaNaooPgZRmcDXaudfsYQfYD9y5iAECvpS"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3",
				"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
			"license": "MIT",
			"urls": [
				"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
				"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
			]
		},
		"contracts/ChildSafeDeposit.sol": {
			"keccak256": "0x3d21379d98704951ee5e1619de3ec19f9c808150d5eef4ce9cd5577efe874daf",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://99be0cc5965ab05c9722f9235d464e27de4113ae3179f3e401b958cc8f14d13d",
				"dweb:/ipfs/Qma3PTQuRZQyNjZAaWjjyE4whVzpQfBgWgiSSBsDfxEkdB"
			]
		}
	},
	"version": 1
}